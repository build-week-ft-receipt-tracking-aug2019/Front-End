"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _CloudinaryComponent2 = _interopRequireDefault(require("../CloudinaryComponent"));

var _cloudinaryCore = require("cloudinary-core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Provides a container for Cloudinary components. Any option set in CloudinaryContext will be passed to the children.
 * 
 * @example
 *<CloudinaryContext cloudName="mycloud" dpr="auto">
 *    <!-- other tags -->
 *    <Image publicId={id}/>
 *</CloudinaryContext>
 *
 */
var CloudinaryContext =
/*#__PURE__*/
function (_CloudinaryComponent) {
  _inherits(CloudinaryContext, _CloudinaryComponent);

  function CloudinaryContext(props, context) {
    var _this;

    _classCallCheck(this, CloudinaryContext);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CloudinaryContext).call(this, props, context));
    _this.state = {};
    return _this;
  }

  _createClass(CloudinaryContext, [{
    key: "getChildContext",
    value: function getChildContext() {
      var _this2 = this;

      var context = {};

      var camelProps = _cloudinaryCore.Util.withCamelCaseKeys(this.props); // only pass valid Cloudinary options


      _CloudinaryComponent2["default"].VALID_OPTIONS.forEach(function (key) {
        var val = camelProps[key] || _this2.context[key];

        if (val !== undefined && val !== null) {
          context[key] = val;
        }
      });

      return context;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      // Remove Cloudinary custom props that don't belong to div
      var nonCloudinaryProps = Object.keys(this.props).filter(function (propName) {
        return !CloudinaryContext.CLOUDINARY_PROPS[propName];
      }).reduce(function (allowedProps, currentProp) {
        allowedProps[currentProp] = _this3.props[currentProp];
        return allowedProps;
      }, {});

      var includeOwnBody = nonCloudinaryProps.includeOwnBody,
          props = _objectWithoutProperties(nonCloudinaryProps, ["includeOwnBody"]);

      return includeOwnBody ? this.props.children : _react["default"].createElement("div", props, this.props.children);
    }
  }]);

  return CloudinaryContext;
}(_CloudinaryComponent2["default"]); // Map Cloudinary props from array to object for efficient lookup


CloudinaryContext.CLOUDINARY_PROPS = _CloudinaryComponent2["default"].VALID_OPTIONS.reduce(function (accumulator, cloudinaryPropName) {
  accumulator[cloudinaryPropName] = true;
  return accumulator;
}, {});
CloudinaryContext.propTypes = _objectSpread({}, _CloudinaryComponent2["default"].propTypes, {
  includeOwnBody: _propTypes["default"].bool
});
CloudinaryContext.defaultProps = {
  includeOwnBody: false
};
CloudinaryContext.childContextTypes = _CloudinaryComponent2["default"].contextTypes;
var _default = CloudinaryContext;
exports["default"] = _default;